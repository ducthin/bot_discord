const { joinVoiceChannel, createAudioPlayer, createAudioResource } = require('@discordjs/voice');
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const ytdl = require('ytdl-core');

// Temporary maintenance mode for YouTube streaming issues
async function createAudioStream(url) {
    console.log('üöß Bot ƒëang trong ch·∫ø ƒë·ªô b·∫£o tr√¨ streaming');
    
    // Th√¥ng b√°o cho user bi·∫øt t√¨nh tr·∫°ng hi·ªán t·∫°i
    throw new Error(`üöß **T√≠nh nƒÉng ph√°t nh·∫°c ƒëang t·∫°m th·ªùi b·∫£o tr√¨**

‚ùå **V·∫•n ƒë·ªÅ:** YouTube ƒëang ch·∫∑n t·∫•t c·∫£ bot music
‚è∞ **Th·ªùi gian:** C√≥ th·ªÉ k√©o d√†i v√†i ng√†y  
üîß **Nguy√™n nh√¢n:** YouTube c·∫≠p nh·∫≠t ch·ªëng bot

**Gi·∫£i ph√°p t·∫°m th·ªùi:**
1. S·ª≠ d·ª•ng bot music kh√°c
2. Ph√°t nh·∫°c tr·ª±c ti·∫øp t·ª´ YouTube
3. ƒê·ª£i c·∫≠p nh·∫≠t t·ª´ developer

Xin l·ªói v√¨ s·ª± b·∫•t ti·ªán! üôè`);
}

// L∆∞u tr·ªØ th√¥ng tin music cho m·ªói guild
const musicData = new Map();

// Format duration t·ª´ seconds th√†nh HH:MM:SS
function formatDuration(seconds) {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hrs > 0) {
        return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    } else {
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
}

// Kh·ªüi t·∫°o d·ªØ li·ªáu music cho guild
function initGuildMusicData(guildId) {
    if (!musicData.has(guildId)) {
        musicData.set(guildId, {
            queue: [],
            isPlaying: false,
            currentSong: null,
            player: null,
            connection: null,
            textChannel: null,
            volume: 50, // M·∫∑c ƒë·ªãnh 50%
            loopMode: 'off', // 'off', 'track', 'queue'
            autoplay: false,
            audioResource: null
        });
    }
    return musicData.get(guildId);
}

// Ph√°t nh·∫°c
async function playMusic(guildData) {
    if (guildData.queue.length === 0) {
        guildData.isPlaying = false;
        guildData.currentSong = null;
        return;
    }

    const song = guildData.queue[0];
    guildData.currentSong = song;
    guildData.isPlaying = true;

    try {
        // Ki·ªÉm tra URL tr∆∞·ªõc khi stream
        if (!song.url || song.url === 'undefined') {
            console.error('URL kh√¥ng h·ª£p l·ªá:', song);
            guildData.queue.shift();
            playMusic(guildData);
            return;
        }

        console.log('ƒêang ph√°t:', song.title, 'URL:', song.url);
        
        // Use the new fallback streaming function
        const { stream, inputType } = await createAudioStream(song.url);

        const resource = createAudioResource(stream, {
            inputType: inputType,
            inlineVolume: true
        });
        
        // √Åp d·ª•ng volume setting
        if (resource.volume) {
            resource.volume.setVolume(guildData.volume / 100);
        }
        
        guildData.audioResource = resource;
        guildData.player.play(resource);

        // L∆∞u v√†o l·ªãch s·ª≠
        const { addToHistory } = require('../commands/history');
        if (song.requester) {
            const userId = song.requester;
            await addToHistory(userId, song);
        }

        // Hi·ªÉn th·ªã th√¥ng tin b√†i h√°t
        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('üéµ ƒêang ph√°t')
            .setDescription(`**${song.title}**`)
            .addFields(
                { name: 'Th·ªùi l∆∞·ª£ng', value: song.duration || 'N/A', inline: true },
                { name: 'Y√™u c·∫ßu b·ªüi', value: song.requester, inline: true },
                { name: 'K√™nh', value: song.channel || 'N/A', inline: true }
            )
            .setThumbnail(song.thumbnail);

        // T·∫°o buttons ƒëi·ªÅu khi·ªÉn
        const controlButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('pause_music')
                    .setLabel('‚è∏Ô∏è T·∫°m d·ª´ng')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('resume_music')
                    .setLabel('‚ñ∂Ô∏è Ti·∫øp t·ª•c')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('skip_music')
                    .setLabel('‚è≠Ô∏è B·ªè qua')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('show_queue')
                    .setLabel('üìã danh s√°ch')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('stop_music')
                    .setLabel('‚èπÔ∏è D·ª´ng')
                    .setStyle(ButtonStyle.Danger)
            );

        // T·∫°o h√†ng buttons th·ª© hai cho lyrics
        const secondRowButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('show_lyrics')
                    .setLabel('üé§ L·ªùi b√†i h√°t')
                    .setStyle(ButtonStyle.Secondary)
            );

        if (guildData.textChannel) {
            const message = await guildData.textChannel.send({ 
                embeds: [embed], 
                components: [controlButtons, secondRowButtons] 
            });
            // L∆∞u message ƒë·ªÉ c√≥ th·ªÉ update buttons sau
            guildData.currentMessage = message;
        }
    } catch (error) {
        console.error('L·ªói khi ph√°t nh·∫°c:', error);
        guildData.queue.shift(); // B·ªè qua b√†i h√°t l·ªói
        playMusic(guildData); // Ph√°t b√†i ti·∫øp theo
    }
}

// T·∫°o k·∫øt n·ªëi voice v√† player
function createMusicConnection(member, guildData) {
    if (!guildData.connection) {
        guildData.connection = joinVoiceChannel({
            channelId: member.voice.channel.id,
            guildId: member.guild.id,
            adapterCreator: member.guild.voiceAdapterCreator,
        });

        guildData.player = createAudioPlayer();
        guildData.connection.subscribe(guildData.player);

        // X·ª≠ l√Ω s·ª± ki·ªán player
        guildData.player.on('idle', async () => {
            await handleSongEnd(guildData);
        });

        guildData.player.on('error', error => {
            console.error('L·ªói audio player:', error);
            guildData.queue.shift();
            playMusic(guildData);
        });
    }
}

// X√≥a buttons c·ªßa b√†i h√°t ƒë√£ ph√°t xong
async function removeButtons(guildData, songTitle) {
    if (guildData.currentMessage) {
        try {
            // T·∫°o embed m·ªõi v·ªõi tr·∫°ng th√°i "ƒê√£ ho√†n th√†nh" v√† kh√¥ng c√≥ buttons
            const completedEmbed = new EmbedBuilder()
                .setColor('#808080') // M√†u x√°m cho b√†i ƒë√£ ho√†n th√†nh
                .setTitle('‚úÖ ƒê√£ ho√†n th√†nh')
                .setDescription(`**${songTitle}**`)
                .setFooter({ text: 'B√†i h√°t ƒë√£ ph√°t xong' });

            // C·∫≠p nh·∫≠t message v·ªõi embed m·ªõi v√† kh√¥ng c√≥ components (buttons)
            await guildData.currentMessage.edit({ 
                embeds: [completedEmbed], 
                components: [] // X√≥a t·∫•t c·∫£ buttons
            });
        } catch (error) {
            console.error('L·ªói khi x√≥a buttons:', error);
        }
    }
}

// X·ª≠ l√Ω khi b√†i h√°t k·∫øt th√∫c
async function handleSongEnd(guildData) {
    const currentSong = guildData.currentSong;
    
    // X√≥a buttons c·ªßa b√†i v·ª´a ph√°t xong
    if (currentSong) {
        await removeButtons(guildData, currentSong.title);
    }
    
    switch (guildData.loopMode) {
        case 'track':
            // L·∫∑p l·∫°i b√†i hi·ªán t·∫°i
            playMusic(guildData);
            return;
            
        case 'queue':
            // Chuy·ªÉn b√†i ƒë·∫ßu xu·ªëng cu·ªëi queue
            const song = guildData.queue.shift();
            guildData.queue.push(song);
            playMusic(guildData);
            return;
            
        case 'off':
        default:
            // B·ªè b√†i ƒë√£ ph√°t
            guildData.queue.shift();
            
            // N·∫øu h·∫øt b√†i v√† autoplay b·∫≠t, t√¨m b√†i li√™n quan
            if (guildData.queue.length === 0 && guildData.autoplay && currentSong) {
                await handleAutoplay(guildData, currentSong);
            } else {
                playMusic(guildData);
            }
            return;
    }
}

// X·ª≠ l√Ω autoplay
async function handleAutoplay(guildData, lastSong) {
    try {
        const { searchYoutube } = require('./youtubeUtils');
        
        // T√¨m ki·∫øm b√†i h√°t li√™n quan d·ª±a tr√™n title
        const searchQuery = lastSong.title.split(' ').slice(0, 3).join(' '); // L·∫•y 3 t·ª´ ƒë·∫ßu
        const relatedSong = await searchYoutube(searchQuery + ' music');
        
        if (relatedSong && relatedSong.url !== lastSong.url) {
            relatedSong.requester = 'Autoplay';
            guildData.queue.push(relatedSong);
            
            if (guildData.textChannel) {
                guildData.textChannel.send(`üéµ **Autoplay**: ƒê√£ th√™m *${relatedSong.title}*`);
            }
        }
        
        playMusic(guildData);
    } catch (error) {
        console.error('L·ªói autoplay:', error);
        playMusic(guildData);
    }
}

module.exports = {
    musicData,
    formatDuration,
    initGuildMusicData,
    playMusic,
    createMusicConnection,
    handleSongEnd,
    removeButtons
};
