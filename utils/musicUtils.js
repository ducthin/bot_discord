const { joinVoiceChannel, createAudioPlayer, createAudioResource, StreamType } = require('@discordjs/voice');
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const ytdl = require('@distube/ytdl-core');

// L∆∞u tr·ªØ th√¥ng tin music cho m·ªói guild
const musicData = new Map();

// Format duration t·ª´ seconds th√†nh HH:MM:SS
function formatDuration(seconds) {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hrs > 0) {
        return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    } else {
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
}

// Kh·ªüi t·∫°o d·ªØ li·ªáu music cho guild
function initGuildMusicData(guildId) {
    if (!musicData.has(guildId)) {
        musicData.set(guildId, {
            queue: [],
            isPlaying: false,
            currentSong: null,
            player: null,
            connection: null,
            textChannel: null,
            volume: 50, // M·∫∑c ƒë·ªãnh 50%
            loopMode: 'off', // 'off', 'track', 'queue'
            autoplay: false,
            audioResource: null,
            errorCount: 0, // ƒê·∫øm s·ªë l·ªói li√™n ti·∫øp
            lastErrorTime: 0 // Th·ªùi gian l·ªói cu·ªëi
        });
    }
    return musicData.get(guildId);
}

// Ph√°t nh·∫°c
async function playMusic(guildData) {
    if (guildData.queue.length === 0) {
        guildData.isPlaying = false;
        guildData.currentSong = null;
        return;
    }

    const song = guildData.queue[0];
    guildData.currentSong = song;
    guildData.isPlaying = true;

    try {
        // Ki·ªÉm tra URL tr∆∞·ªõc khi stream
        if (!song.url || song.url === 'undefined') {
            console.error('URL kh√¥ng h·ª£p l·ªá:', song);
            guildData.queue.shift();
            playMusic(guildData);
            return;
        }

        console.log('ƒêang ph√°t:', song.title, 'URL:', song.url);
        console.log('Creating audio stream for:', song.url);
        
        // YouTube video streaming with improved DNS handling
        const stream = ytdl(song.url, {
            filter: 'audioonly',
            quality: 'highestaudio',
            highWaterMark: 1 << 25,
            requestOptions: {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                },
                timeout: 30000, // 30 second timeout
                family: 4 // Force IPv4 to avoid DNS issues
            },
            // Th√™m options ƒë·ªÉ gi·∫£m DNS errors
            format: 'mp4',
            begin: '0s'
        });
        
        console.log('‚úÖ Using @distube/ytdl-core stream');

        const resource = createAudioResource(stream, {
            inputType: StreamType.Arbitrary,
            inlineVolume: true
        });
        
        // √Åp d·ª•ng volume setting
        if (resource.volume) {
            resource.volume.setVolume(guildData.volume / 100);
        }
        
        guildData.audioResource = resource;
        
        // Set up error handling cho audio player
        guildData.player.on('error', (error) => {
            console.error('L·ªói audio player:', error);
            
            // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
            if (error.message.includes('ETIMEDOUT') || error.message.includes('timeout')) {
                console.log('üîÑ L·ªói timeout, th·ª≠ l·∫°i sau 3 gi√¢y...');
                setTimeout(() => {
                    if (guildData.queue.length > 0) {
                        handleSongEnd(guildData);
                    }
                }, 3000);
            } else if (error.message.includes('ECONNRESET') || error.message.includes('ENOTFOUND')) {
                console.log('üîÑ L·ªói k·∫øt n·ªëi m·∫°ng, th·ª≠ l·∫°i sau 5 gi√¢y...');
                setTimeout(() => {
                    if (guildData.queue.length > 0) {
                        handleSongEnd(guildData);
                    }
                }, 5000);
            } else {
                // L·ªói kh√°c, chuy·ªÉn b√†i ti·∫øp theo
                handleSongEnd(guildData);
            }
        });
        
        guildData.player.play(resource);

        // Reset error count khi ph√°t th√†nh c√¥ng
        guildData.errorCount = 0;

        // L∆∞u v√†o l·ªãch s·ª≠
        const { addToHistory } = require('../commands/history');
        if (song.requester) {
            const userId = song.requester;
            await addToHistory(userId, song);
        }

        // Hi·ªÉn th·ªã th√¥ng tin b√†i h√°t
        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('üéµ ƒêang ph√°t')
            .setDescription(`**${song.title}**`)
            .addFields(
                { name: 'Th·ªùi l∆∞·ª£ng', value: song.duration || 'N/A', inline: true },
                { name: 'Y√™u c·∫ßu b·ªüi', value: song.requester, inline: true },
                { name: 'K√™nh', value: song.channel || 'N/A', inline: true }
            )
            .setThumbnail(song.thumbnail);

        // T·∫°o buttons ƒëi·ªÅu khi·ªÉn
        const controlButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('pause_music')
                    .setLabel('‚è∏Ô∏è T·∫°m d·ª´ng')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('resume_music')
                    .setLabel('‚ñ∂Ô∏è Ti·∫øp t·ª•c')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('skip_music')
                    .setLabel('‚è≠Ô∏è B·ªè qua')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('show_queue')
                    .setLabel('üìã danh s√°ch')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('stop_music')
                    .setLabel('‚èπÔ∏è D·ª´ng')
                    .setStyle(ButtonStyle.Danger)
            );

        // T·∫°o h√†ng buttons th·ª© hai cho lyrics
        const secondRowButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('show_lyrics')
                    .setLabel('üé§ L·ªùi b√†i h√°t')
                    .setStyle(ButtonStyle.Secondary)
            );

        if (guildData.textChannel) {
            const message = await guildData.textChannel.send({ 
                embeds: [embed], 
                components: [controlButtons, secondRowButtons] 
            });
            
            // L∆∞u message reference ƒë·ªÉ c√≥ th·ªÉ x√≥a buttons sau
            guildData.currentMessage = message;
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi ph√°t nh·∫°c:', error.message);
        
        // TƒÉng error count
        guildData.errorCount = (guildData.errorCount || 0) + 1;
        guildData.lastErrorTime = Date.now();
        
        // Send error message to channel
        if (guildData.textChannel) {
            // X√°c ƒë·ªãnh lo·∫°i l·ªói
            let errorType = 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
            let shouldRetry = false;
            
            if (error.message.includes('ETIMEDOUT') || error.message.includes('timeout')) {
                errorType = 'L·ªói timeout k·∫øt n·ªëi';
                shouldRetry = true;
            } else if (error.message.includes('ECONNRESET') || error.message.includes('ENOTFOUND')) {
                errorType = 'L·ªói k·∫øt n·ªëi m·∫°ng';
                shouldRetry = true;
            } else if (error.message.includes('403') || error.message.includes('blocked')) {
                errorType = 'Video b·ªã ch·∫∑n ho·∫∑c ri√™ng t∆∞';
            } else if (error.message.includes('404')) {
                errorType = 'Video kh√¥ng t·ªìn t·∫°i';
            }
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå L·ªói ph√°t nh·∫°c')
                .setDescription(`Kh√¥ng th·ªÉ ph√°t **${song.title}**\nL√Ω do: ${errorType}`)
                .setFooter({ text: shouldRetry && guildData.errorCount < 3 ? 'ƒêang th·ª≠ l·∫°i...' : 'ƒêang chuy·ªÉn sang b√†i ti·∫øp theo...' });
            
            guildData.textChannel.send({ embeds: [errorEmbed] });
        }
        
        // X√≥a buttons n·∫øu c√≥
        if (guildData.currentSong) {
            await removeButtons(guildData, guildData.currentSong.title);
        }
        
        // Ki·ªÉm tra error count
        if (guildData.errorCount >= 3) {
            console.log('‚ùå Qu√° nhi·ªÅu l·ªói, d·ª´ng ph√°t nh·∫°c');
            guildData.queue = [];
            guildData.isPlaying = false;
            guildData.currentSong = null;
            return;
        }
        
        guildData.queue.shift(); // B·ªè qua b√†i h√°t l·ªói
        
        // Ch·ªù 3 gi√¢y tr∆∞·ªõc khi ph√°t b√†i ti·∫øp theo
        if (guildData.queue.length > 0) {
            setTimeout(() => {
                playMusic(guildData);
            }, 3000);
        } else {
            guildData.isPlaying = false;
            guildData.currentSong = null;
        }
    }
}

// T·∫°o k·∫øt n·ªëi voice v√† player
function createMusicConnection(member, guildData) {
    if (!guildData.connection) {
        guildData.connection = joinVoiceChannel({
            channelId: member.voice.channel.id,
            guildId: member.guild.id,
            adapterCreator: member.guild.voiceAdapterCreator,
        });

        guildData.player = createAudioPlayer();
        guildData.connection.subscribe(guildData.player);

        // X·ª≠ l√Ω s·ª± ki·ªán player
        guildData.player.on('idle', async () => {
            await handleSongEnd(guildData);
        });

        guildData.player.on('error', async error => {
            console.error('L·ªói audio player:', error);
            
            const currentTime = Date.now();
            
            // Ki·ªÉm tra n·∫øu c√≥ qu√° nhi·ªÅu l·ªói li√™n ti·∫øp trong th·ªùi gian ng·∫Øn
            if (currentTime - guildData.lastErrorTime < 10000) { // 10 gi√¢y
                guildData.errorCount++;
            } else {
                guildData.errorCount = 1; // Reset counter n·∫øu ƒë√£ l√¢u
            }
            
            guildData.lastErrorTime = currentTime;
            
            // N·∫øu c√≥ qu√° nhi·ªÅu l·ªói li√™n ti·∫øp, d·ª´ng bot ƒë·ªÉ tr√°nh spam
            if (guildData.errorCount >= 3) {
                console.log('‚ùå Qu√° nhi·ªÅu l·ªói li√™n ti·∫øp, d·ª´ng ph√°t nh·∫°c');
                
                if (guildData.textChannel) {
                    const errorEmbed = new EmbedBuilder()
                        .setColor('#ff0000')
                        .setTitle('‚ùå L·ªói h·ªá th·ªëng')
                        .setDescription('Bot g·∫∑p qu√° nhi·ªÅu l·ªói li√™n ti·∫øp. C√≥ th·ªÉ do:\n‚Ä¢ M·∫°ng kh√¥ng ·ªïn ƒë·ªãnh\n‚Ä¢ YouTube ƒëang ch·∫∑n requests\n‚Ä¢ Server qu√° t·∫£i')
                        .addFields(
                            { name: 'üîß Gi·∫£i ph√°p', value: 'H√£y th·ª≠ l·∫°i sau v√†i ph√∫t ho·∫∑c s·ª≠ d·ª•ng l·ªánh `/stop` r·ªìi `/play` l·∫°i', inline: false }
                        )
                        .setFooter({ text: 'Bot s·∫Ω t·ª± ƒë·ªông reset sau 5 ph√∫t' });
                    
                    guildData.textChannel.send({ embeds: [errorEmbed] });
                }
                
                // Clear queue v√† reset
                guildData.queue = [];
                guildData.isPlaying = false;
                guildData.currentSong = null;
                
                // Reset error count sau 5 ph√∫t
                setTimeout(() => {
                    guildData.errorCount = 0;
                    console.log('‚úÖ Error count ƒë√£ ƒë∆∞·ª£c reset cho guild:', guildData);
                }, 300000); // 5 ph√∫t
                
                return;
            }
            
            // X√≥a buttons c·ªßa b√†i hi·ªán t·∫°i n·∫øu c√≥
            if (guildData.currentSong) {
                await removeButtons(guildData, guildData.currentSong.title);
            }
            
            // Skip b√†i hi·ªán t·∫°i v√† ch·ªù 2 gi√¢y tr∆∞·ªõc khi ph√°t ti·∫øp
            guildData.queue.shift();
            
            if (guildData.queue.length > 0) {
                console.log('‚è≥ Ch·ªù 2 gi√¢y tr∆∞·ªõc khi ph√°t b√†i ti·∫øp theo...');
                setTimeout(() => {
                    playMusic(guildData);
                }, 2000);
            } else {
                guildData.isPlaying = false;
                guildData.currentSong = null;
            }
        });
    }
}

// X√≥a buttons c·ªßa b√†i h√°t ƒë√£ ph√°t xong
async function removeButtons(guildData, songTitle) {
    // Ki·ªÉm tra xem ƒë√£ c√≥ currentMessage v√† ch∆∞a ƒë∆∞·ª£c x√≥a
    if (!guildData.currentMessage) {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ message n√†o ƒë·ªÉ x√≥a buttons');
        return;
    }
    
    try {
        // T·∫°o embed m·ªõi v·ªõi tr·∫°ng th√°i "ƒê√£ ho√†n th√†nh" v√† kh√¥ng c√≥ buttons
        const completedEmbed = new EmbedBuilder()
            .setColor('#808080') // M√†u x√°m cho b√†i ƒë√£ ho√†n th√†nh
            .setTitle('‚úÖ ƒê√£ ho√†n th√†nh')
            .setDescription(`**${songTitle}**`)
            .setFooter({ text: 'B√†i h√°t ƒë√£ ph√°t xong' })
            .setTimestamp();

        // C·∫≠p nh·∫≠t message v·ªõi embed m·ªõi v√† kh√¥ng c√≥ components (buttons)
        await guildData.currentMessage.edit({ 
            embeds: [completedEmbed], 
            components: [] // X√≥a t·∫•t c·∫£ buttons
        });
        
        console.log(`‚úÖ ƒê√£ x√≥a buttons cho b√†i: ${songTitle}`);
        
    } catch (error) {
        // X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn
        if (error.code === 10008) {
            console.log('‚ö†Ô∏è Message ƒë√£ b·ªã x√≥a, kh√¥ng th·ªÉ update buttons');
        } else if (error.code === 50001) {
            console.log('‚ö†Ô∏è Kh√¥ng c√≥ quy·ªÅn edit message');
        } else if (error.code === 10062) {
            console.log('‚ö†Ô∏è Message interaction ƒë√£ expired');
        } else {
            console.error('‚ùå L·ªói khi x√≥a buttons:', error.message);
        }
    } finally {
        // Reset currentMessage reference sau khi x·ª≠ l√Ω (th√†nh c√¥ng ho·∫∑c l·ªói)
        guildData.currentMessage = null;
    }
}

// X·ª≠ l√Ω khi b√†i h√°t k·∫øt th√∫c
async function handleSongEnd(guildData) {
    const currentSong = guildData.currentSong;
    
    // X√≥a buttons c·ªßa b√†i v·ª´a ph√°t xong (n·∫øu ch∆∞a ƒë∆∞·ª£c x√≥a)
    if (currentSong && guildData.currentMessage) {
        await removeButtons(guildData, currentSong.title);
    }
    
    switch (guildData.loopMode) {
        case 'track':
            // L·∫∑p l·∫°i b√†i hi·ªán t·∫°i
            playMusic(guildData);
            return;
            
        case 'queue':
            // Chuy·ªÉn b√†i ƒë·∫ßu xu·ªëng cu·ªëi queue
            const song = guildData.queue.shift();
            guildData.queue.push(song);
            playMusic(guildData);
            return;
            
        case 'off':
        default:
            // B·ªè b√†i ƒë√£ ph√°t
            guildData.queue.shift();
            
            // N·∫øu h·∫øt b√†i v√† autoplay b·∫≠t, t√¨m b√†i li√™n quan
            if (guildData.queue.length === 0 && guildData.autoplay && currentSong) {
                await handleAutoplay(guildData, currentSong);
            } else {
                playMusic(guildData);
            }
            return;
    }
}

// X·ª≠ l√Ω autoplay
async function handleAutoplay(guildData, lastSong) {
    try {
        const { searchYoutube } = require('./youtubeUtils');
        
        // T√¨m ki·∫øm b√†i h√°t li√™n quan d·ª±a tr√™n title
        const searchQuery = lastSong.title.split(' ').slice(0, 3).join(' '); // L·∫•y 3 t·ª´ ƒë·∫ßu
        const relatedSong = await searchYoutube(searchQuery + ' music');
        
        if (relatedSong && relatedSong.url !== lastSong.url) {
            relatedSong.requester = 'Autoplay';
            guildData.queue.push(relatedSong);
            
            if (guildData.textChannel) {
                guildData.textChannel.send(`üéµ **Autoplay**: ƒê√£ th√™m *${relatedSong.title}*`);
            }
        }
        
        playMusic(guildData);
    } catch (error) {
        console.error('L·ªói autoplay:', error);
        playMusic(guildData);
    }
}

module.exports = {
    musicData,
    formatDuration,
    initGuildMusicData,
    playMusic,
    createMusicConnection,
    handleSongEnd,
    removeButtons
};