const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { initGuildMusicData } = require('../utils/musicUtils');
const { getLyrics, parseArtistTitle } = require('../utils/lyricsUtils');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('lyrics')
        .setDescription('Hi·ªÉn th·ªã l·ªùi b√†i h√°t')
        .addStringOption(option =>
            option.setName('song')
                .setDescription('T√™n b√†i h√°t (ƒë·ªÉ tr·ªëng ƒë·ªÉ l·∫•y b√†i ƒëang ph√°t)')
                .setRequired(false)
        ),

    async execute(interaction) {
        const guildData = initGuildMusicData(interaction.guild.id);
        const customSong = interaction.options.getString('song');
        
        let songTitle, songArtist;
        
        if (customSong) {
            // N·∫øu user nh·∫≠p t√™n b√†i h√°t
            const parsed = parseArtistTitle(customSong);
            songTitle = parsed.title;
            songArtist = parsed.artist;
        } else {
            // L·∫•y b√†i h√°t ƒëang ph√°t
            if (!guildData.currentSong) {
                return interaction.reply('‚ùå Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t! S·ª≠ d·ª•ng `/lyrics song:<t√™n b√†i h√°t>` ƒë·ªÉ t√¨m l·ªùi b√†i h√°t c·ª• th·ªÉ.');
            }
            
            const parsed = parseArtistTitle(guildData.currentSong.title);
            songTitle = parsed.title;
            songArtist = parsed.artist;
        }

        await interaction.deferReply();

        try {
            const lyricsData = await getLyrics(songTitle, songArtist);
            
            if (!lyricsData.success) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#ff0000')
                    .setTitle('‚ùå Kh√¥ng t√¨m th·∫•y l·ªùi b√†i h√°t')
                    .setDescription(lyricsData.message)
                    .addFields(
                        { name: 'T√¨m ki·∫øm cho', value: `${songArtist ? songArtist + ' - ' : ''}${songTitle}`, inline: false },
                        { name: 'G·ª£i √Ω', value: '‚Ä¢ Th·ª≠ v·ªõi t√™n b√†i h√°t ch√≠nh x√°c h∆°n\n‚Ä¢ Th√™m t√™n ngh·ªá sƒ©: `/lyrics song:S∆°n T√πng - L·∫°c Tr√¥i`\n‚Ä¢ M·ªôt s·ªë b√†i h√°t c√≥ th·ªÉ kh√¥ng c√≥ l·ªùi', inline: false }
                    );
                
                return interaction.followUp({ embeds: [errorEmbed] });
            }

            // T·∫°o embed hi·ªÉn th·ªã lyrics
            const lyricsEmbed = new EmbedBuilder()
                .setColor('#00ff00')
                .setTitle('üé§ L·ªùi b√†i h√°t')
                .setDescription(`**${lyricsData.title}**\n*b·ªüi ${lyricsData.artist}*`)
                .addFields(
                    { name: 'L·ªùi b√†i h√°t', value: lyricsData.lyrics, inline: false }
                )
                .setFooter({ text: 'Ngu·ªìn: Genius.com' });
            
            if (lyricsData.thumbnail) {
                lyricsEmbed.setThumbnail(lyricsData.thumbnail);
            }

            // T·∫°o button ƒë·ªÉ xem ƒë·∫ßy ƒë·ªß tr√™n Genius
            const lyricsButton = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setLabel('üîó Xem ƒë·∫ßy ƒë·ªß tr√™n Genius')
                        .setStyle(ButtonStyle.Link)
                        .setURL(lyricsData.url)
                );

            interaction.followUp({ 
                embeds: [lyricsEmbed], 
                components: [lyricsButton] 
            });

        } catch (error) {
            console.error('L·ªói trong lyrics command:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå L·ªói h·ªá th·ªëng')
                .setDescription('ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm l·ªùi b√†i h√°t. Vui l√≤ng th·ª≠ l·∫°i sau.')
                .addFields(
                    { name: 'T√¨m ki·∫øm cho', value: `${songArtist ? songArtist + ' - ' : ''}${songTitle}`, inline: false }
                );
            
            interaction.followUp({ embeds: [errorEmbed] });
        }
    }
};
