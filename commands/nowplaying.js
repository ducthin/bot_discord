const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { initGuildMusicData } = require('../utils/musicUtils');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('nowplaying')
        .setDescription('Hi·ªÉn th·ªã b√†i h√°t ƒëang ph√°t'),

    async execute(interaction) {
        const guildData = initGuildMusicData(interaction.guild.id);
        
        if (!guildData.currentSong) {
            return interaction.reply('‚ùå Kh√¥ng c√≥ nh·∫°c n√†o ƒëang ph√°t!');
        }

        const nowPlayingEmbed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('üéµ ƒêang ph√°t')
            .setDescription(`**${guildData.currentSong.title}**`)
            .addFields(
                { name: 'Th·ªùi l∆∞·ª£ng', value: guildData.currentSong.duration, inline: true },
                { name: 'Y√™u c·∫ßu b·ªüi', value: guildData.currentSong.requester, inline: true }
            )
            .setThumbnail(guildData.currentSong.thumbnail);

        // T·∫°o buttons ƒëi·ªÅu khi·ªÉn
        const controlButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('pause_music')
                    .setLabel('‚è∏Ô∏è T·∫°m d·ª´ng')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('resume_music')
                    .setLabel('‚ñ∂Ô∏è Ti·∫øp t·ª•c')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('skip_music')
                    .setLabel('‚è≠Ô∏è B·ªè qua')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('show_queue')
                    .setLabel('üìã danh s√°ch')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('stop_music')
                    .setLabel('‚èπÔ∏è D·ª´ng')
                    .setStyle(ButtonStyle.Danger)
            );

        interaction.reply({ 
            embeds: [nowPlayingEmbed], 
            components: [controlButtons] 
        });
    }
};
