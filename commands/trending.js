const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { initGuildMusicData, playMusic, createMusicConnection } = require('../utils/musicUtils');
const { searchYoutube } = require('../utils/youtubeUtils');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('trending')
        .setDescription('Ph√°t nh·∫°c th·ªãnh h√†nh t·ª´ YouTube')
        .addSubcommand(subcommand =>
            subcommand
                .setName('play')
                .setDescription('Ph√°t nh·∫°c trending ngay')
                .addStringOption(option =>
                    option.setName('region')
                        .setDescription('Khu v·ª±c')
                        .setRequired(false)
                        .addChoices(
                            { name: 'Vi·ªát Nam', value: 'VN' },
                            { name: 'H√†n Qu·ªëc (K-pop)', value: 'KR' },
                            { name: 'M·ªπ (US)', value: 'US' },
                            { name: 'To√†n c·∫ßu', value: 'GLOBAL' },
                            { name: 'Ch√¢u √Å', value: 'ASIA' }
                        )
                )
                .addIntegerOption(option =>
                    option.setName('count')
                        .setDescription('S·ªë b√†i h√°t mu·ªën th√™m (1-20)')
                        .setRequired(false)
                        .setMinValue(1)
                        .setMaxValue(20)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('auto')
                .setDescription('Qu·∫£n l√Ω auto-trending')
                .addStringOption(option =>
                    option.setName('action')
                        .setDescription('H√†nh ƒë·ªông')
                        .setRequired(true)
                        .addChoices(
                            { name: 'B·∫≠t', value: 'enable' },
                            { name: 'T·∫Øt', value: 'disable' },
                            { name: 'Tr·∫°ng th√°i', value: 'status' }
                        )
                )
                .addStringOption(option =>
                    option.setName('region')
                        .setDescription('Khu v·ª±c cho auto-trending')
                        .setRequired(false)
                        .addChoices(
                            { name: 'Vi·ªát Nam', value: 'VN' },
                            { name: 'H√†n Qu·ªëc (K-pop)', value: 'KR' },
                            { name: 'M·ªπ (US)', value: 'US' },
                            { name: 'To√†n c·∫ßu', value: 'GLOBAL' },
                            { name: 'Ch√¢u √Å', value: 'ASIA' }
                        )
                )
        ),

    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();
        
        if (subcommand === 'play') {
            return this.executePlay(interaction);
        } else if (subcommand === 'auto') {
            return this.executeAuto(interaction);
        }
    },

    async executePlay(interaction) {
        const guildData = initGuildMusicData(interaction.guildId);

        if (!interaction.member.voice.channel) {
            return interaction.reply({
                content: '‚ùå B·∫°n c·∫ßn v√†o voice channel ƒë·ªÉ ph√°t nh·∫°c th·ªãnh h√†nh!',
                ephemeral: true
            });
        }

        const region = interaction.options.getString('region') || 'VN';
        const count = interaction.options.getInteger('count') || 10;

        try {
            await interaction.deferReply();

            // T·∫°o danh s√°ch t·ª´ kh√≥a trending theo khu v·ª±c
            const trendingQueries = this.getTrendingQueries(region);
            
            const trendingSongs = [];
            const maxRetries = Math.min(trendingQueries.length, count * 2); // T√¨m nhi·ªÅu h∆°n ƒë·ªÉ c√≥ l·ª±a ch·ªçn

            for (let i = 0; i < maxRetries && trendingSongs.length < count; i++) {
                try {
                    const query = trendingQueries[i % trendingQueries.length];
                    const searchResults = await searchYoutube(query, 3);
                    
                    // Chuy·ªÉn v·ªÅ d·∫°ng array ƒë·ªÉ x·ª≠ l√Ω th·ªëng nh·∫•t
                    let results = [];
                    if (Array.isArray(searchResults)) {
                        results = searchResults;
                    } else if (searchResults && searchResults.title) {
                        results = [searchResults];
                    }
                    
                    if (results.length > 0) {
                        // L·ªçc b√†i ch∆∞a c√≥ trong danh s√°ch
                        for (const song of results) {
                            if (trendingSongs.length < count && 
                                !trendingSongs.some(existing => existing.url === song.url) &&
                                !guildData.queue.some(existing => existing.url === song.url)) {
                                
                                song.requestedBy = interaction.user.id;
                                song.trendingRank = trendingSongs.length + 1;
                                trendingSongs.push(song);
                            }
                        }
                    }
                } catch (error) {
                    console.log(`L·ªói t√¨m trending: ${error.message}`);
                }
            }

            if (trendingSongs.length === 0) {
                return interaction.editReply({
                    content: '‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y nh·∫°c th·ªãnh h√†nh! H√£y th·ª≠ l·∫°i sau.'
                });
            }

            // Th√™m v√†o queue
            guildData.queue.push(...trendingSongs);

            // T·∫°o embed hi·ªÉn th·ªã
            const embed = new EmbedBuilder()
                .setColor('#ff6b6b')
                .setTitle('üî• Nh·∫°c Th·ªãnh H√†nh YouTube')
                .setDescription(`**${this.getRegionDisplayName(region)}** - ${trendingSongs.length} b√†i h√°t`)
                .addFields(
                    { name: 'üìä Khu v·ª±c', value: this.getRegionDisplayName(region), inline: true },
                    { name: 'üéµ S·ªë b√†i', value: `${trendingSongs.length} b√†i`, inline: true },
                    { name: 'üìà C·∫≠p nh·∫≠t', value: 'Real-time', inline: true }
                );

            // Hi·ªÉn th·ªã danh s√°ch trending (r√∫t ng·∫Øn ƒë·ªÉ tr√°nh v∆∞·ª£t qu√° 1024 k√Ω t·ª±)
            const songList = trendingSongs.slice(0, 5).map((song, index) => {
                // C·∫Øt ng·∫Øn t√™n b√†i n·∫øu qu√° d√†i
                const truncatedTitle = song.title.length > 50 
                    ? song.title.substring(0, 47) + '...' 
                    : song.title;
                
                return `**${index + 1}.** ${truncatedTitle}\n*‚è±Ô∏è ${song.duration || 'N/A'}*`;
            }).join('\n\n');

            if (songList) {
                embed.addFields({ name: 'üéµ Top Trending', value: songList });
            }

            // T·∫°o control buttons
            const controlRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('trending_play_now')
                        .setLabel('‚ñ∂Ô∏è Ph√°t ngay')
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId('trending_shuffle')
                        .setLabel('üîÄ Tr·ªôn b√†i')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('trending_more')
                        .setLabel('‚ûï Th√™m 10 b√†i')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('trending_refresh')
                        .setLabel('üîÑ L√†m m·ªõi')
                        .setStyle(ButtonStyle.Secondary)
                );

            await interaction.editReply({
                embeds: [embed],
                components: [controlRow]
            });

            // T·ª± ƒë·ªông ph√°t n·∫øu kh√¥ng c√≥ nh·∫°c ƒëang ph√°t
            if (!guildData.isPlaying && guildData.queue.length > 0) {
                createMusicConnection(interaction.member, guildData);
                playMusic(guildData);
                
                await interaction.followUp({
                    content: 'üéµ ƒê√£ b·∫Øt ƒë·∫ßu ph√°t nh·∫°c th·ªãnh h√†nh!',
                    ephemeral: true
                });
            }

        } catch (error) {
            console.error('L·ªói trending command:', error);
            await interaction.editReply({
                content: '‚ùå C√≥ l·ªói khi t·∫£i nh·∫°c th·ªãnh h√†nh!'
            });
        }
    },

    async executeAuto(interaction) {
        const guildData = initGuildMusicData(interaction.guildId);
        const action = interaction.options.getString('action');
        const region = interaction.options.getString('region') || guildData.autoTrending.region || 'VN';

        if (action === 'enable') {
            guildData.autoTrending.enabled = true;
            guildData.autoTrending.region = region;
            guildData.autoTrending.consecutiveFailures = 0;
            
            const regionName = this.getRegionDisplayName(region);
            
            await interaction.reply({
                content: `‚úÖ **Auto-trending ƒë√£ ƒë∆∞·ª£c b·∫≠t** cho khu v·ª±c **${regionName}**!\n` +
                        `üéµ Bot s·∫Ω t·ª± ƒë·ªông ph√°t nh·∫°c th·ªãnh h√†nh khi h·∫øt b√†i trong queue.\n` +
                        `üì¶ H·ªá th·ªëng s·∫Ω t·∫£i 20 b√†i m·ªôt l·∫ßn v√† ph√°t d·∫ßn d·∫ßn.`,
                ephemeral: true
            });
            
            // N·∫øu queue r·ªóng v√† kh√¥ng ƒëang ph√°t, b·∫Øt ƒë·∫ßu auto-trending ngay
            if (guildData.queue.length === 0 && !guildData.isPlaying) {
                guildData.textChannel = interaction.channel;
                
                if (interaction.member.voice.channel) {
                    createMusicConnection(interaction.member, guildData);
                    const { handleAutoTrending } = require('../utils/musicUtils');
                    await handleAutoTrending(guildData);
                }
            }

        } else if (action === 'disable') {
            guildData.autoTrending.enabled = false;
            
            await interaction.reply({
                content: `üö´ **Auto-trending ƒë√£ ƒë∆∞·ª£c t·∫Øt**.\n` +
                        `üìä ƒê√£ ph√°t ${guildData.autoTrending.count} b√†i auto-trending.`,
                ephemeral: true
            });

        } else if (action === 'status') {
            const regionName = this.getRegionDisplayName(guildData.autoTrending.region);
            const status = guildData.autoTrending.enabled ? '‚úÖ ƒêang b·∫≠t' : 'üö´ ƒê√£ t·∫Øt';
            const listCount = guildData.autoTrending.trendingList.length;
            const playedCount = guildData.autoTrending.playedSongs.size;
            
            const embed = new EmbedBuilder()
                .setColor(guildData.autoTrending.enabled ? '#00ff00' : '#ff0000')
                .setTitle('üî• Tr·∫°ng th√°i Auto-Trending')
                .addFields(
                    { name: 'üìä Tr·∫°ng th√°i', value: status, inline: true },
                    { name: 'üåç Khu v·ª±c', value: regionName, inline: true },
                    { name: 'üéµ ƒê√£ ph√°t', value: `${guildData.autoTrending.count} b√†i`, inline: true },
                    { name: 'üì¶ C√≤n trong list', value: `${listCount} b√†i`, inline: true },
                    { name: 'üîÑ ƒê√£ ƒë√°nh d·∫•u', value: `${playedCount} b√†i`, inline: true },
                    { name: '‚ùå L·ªói li√™n ti·∫øp', value: `${guildData.autoTrending.consecutiveFailures}/10`, inline: true }
                );

            if (guildData.autoTrending.lastFetch) {
                const lastFetch = new Date(guildData.autoTrending.lastFetch);
                embed.addFields({
                    name: 'üïí L·∫ßn t·∫£i cu·ªëi',
                    value: `<t:${Math.floor(lastFetch.getTime() / 1000)}:R>`,
                    inline: false
                });
            }

            await interaction.reply({ embeds: [embed], ephemeral: true });
        }
    },

    // L·∫•y queries trending theo khu v·ª±c
    getTrendingQueries(region) {
        const queries = {
            'VN': [
                'trending vietnam music 2024',
                'top vpop hits 2024',
                'nh·∫°c vi·ªát th·ªãnh h√†nh',
                's∆°n t√πng mtp m·ªõi nh·∫•t',
                'h√≤a minzy trending',
                'erik vpop hits',
                'jack k-icm trending',
                'ƒëen v√¢u rap trending',
                'amee vpop 2024',
                'min vpop trending',
                'nh·∫°c tr·∫ª vi·ªát nam hot',
                'nh·∫°c vi·ªát viral tiktok',
                'vietnamese pop music trending',
                'b√≠ch ph∆∞∆°ng vpop hits',
                'chi pu trending 2024',
                'm·ªπ t√¢m ballad m·ªõi',
                'ƒë·ª©c ph√∫c vpop trending',
                'orange vpop ballad',
                'karik rap trending',
                'rhymastic rap vi·ªát',
                'binz rap vpop hits',
                't√≥c ti√™n vpop dance',
                'hieuthuhai rap trending',
                'mono vpop ballad',
                'v≈© c√°t t∆∞·ªùng indie',
                'justatee rap vpop',
                'lime vpop trending',
                'lam tr∆∞·ªùng ballad',
                'nguy√™n h√† indie vpop',
                'ph∆∞∆°ng ly vpop hits',
                'touliver edm vpop',
                '∆∞ng ho√†ng ph√∫c ballad',
                'ti√™n cookie vpop',
                'grey d vpop trending',
                'onlyc vpop ballad',
                'noo ph∆∞·ªõc th·ªãnh vpop',
                'lou ho√†ng vpop hits',
                'chillies vpop band',
                'cao b√° h∆∞ng ballad',
                'th·ªãnh suy indie vpop',
                'kh√≥i vpop indie',
                'v≈© vpop trending',
                'phan m·∫°nh qu·ª≥nh ballad',
                'l√£ phong l√¢m vpop',
                'jombie rap vpop',
                'd·∫ø cho·∫Øt rap trending',
                'dat g rap vpop',
                'wxrdie rap underground',
                'young h rap trending',
                'mc mike rap vpop',
                'soobin ho√†ng s∆°n vpop',
                'isaac vpop trending',
                'rocker nguyen vpop',
                'kelvin kh√°nh vpop',
                'ngh vpop trending',
                'masew edm vpop',
                'k391 vpop remix',
                'long n√≥n l√° vpop',
                'kh·∫Øc h∆∞ng vpop hits',
                'wowy rap vi·ªát',
                'rap vi·ªát trending',
                'lil shady rap',
                'b ray rap vi·ªát',
                'tlinh rap trending',
                'ricky star rap',
                'obito rap vi·ªát',
                'lƒÉng ld rap',
                'pjnboys rap trending',
                'andree right hand rap',
                'rich chigga rap vi·ªát',
                'bigdaddy rap trending',
                'yanbi rap vpop',
                'emily rap vi·ªát',
                'blacka rap trending',
                'kimmese rap',
                'suboi rap vi·ªát',
                'lil knight rap',
                'touliver rap trending'
            ],
            'KR': [
                'kpop trending 2024',
                'bts latest hits',
                'blackpink trending',
                'twice new songs 2024',
                'aespa trending music',
                'ive kpop hits',
                'itzy trending songs',
                'newjeans trending',
                'le sserafim hits',
                'stray kids trending',
                'seventeen kpop 2024',
                'gidle trending music',
                'red velvet latest',
                'kpop viral tiktok',
                'korean pop trending'
            ],
            'US': [
                'trending music usa 2024',
                'billboard hot 100',
                'pop music trending',
                'hip hop trending 2024',
                'taylor swift latest',
                'ariana grande trending',
                'dua lipa hits 2024',
                'the weeknd trending',
                'billie eilish new',
                'post malone trending',
                'drake hip hop 2024',
                'olivia rodrigo hits',
                'trending rap music',
                'viral music tiktok usa',
                'american pop trending'
            ],
            'GLOBAL': [
                'trending music worldwide 2024',
                'global hits 2024',
                'viral songs tiktok',
                'international pop trending',
                'world music trending',
                'global viral hits',
                'trending songs spotify',
                'youtube trending music',
                'international hits 2024',
                'global pop music',
                'trending dance music',
                'viral music videos',
                'world pop trending',
                'international viral songs',
                'global music charts'
            ],
            'ASIA': [
                'asian pop trending 2024',
                'jpop trending music',
                'thai pop trending',
                'cpop mandarin hits',
                'asian music viral',
                'bollywood trending 2024',
                'jpop hits 2024',
                'thai music trending',
                'chinese pop trending',
                'indo pop trending',
                'asian viral tiktok',
                'oriental pop music',
                'asian charts 2024',
                'trending asian songs',
                'eastern pop hits'
            ]
        };

        return queries[region] || queries['GLOBAL'];
    },

    // Hi·ªÉn th·ªã t√™n khu v·ª±c
    getRegionDisplayName(region) {
        const names = {
            'VN': 'üáªüá≥ Vi·ªát Nam',
            'KR': 'üá∞üá∑ H√†n Qu·ªëc (K-pop)',
            'US': 'üá∫üá∏ M·ªπ (US)',
            'GLOBAL': 'üåç To√†n c·∫ßu',
            'ASIA': 'üåè Ch√¢u √Å'
        };
        return names[region] || 'üåç To√†n c·∫ßu';
    },

    // T·ª± ƒë·ªông trending (g·ªçi t·ª´ autoplay)
    async getAutoTrendingSong(region = 'VN', limit = 1) {
        try {
            console.log(`üîç Getting auto trending songs for region: ${region}, limit: ${limit}`);
            
            const { searchYoutube } = require('../utils/youtubeUtils');
            
            const queries = this.getTrendingQueries(region);
            const allSongs = [];
            
            // N·∫øu c·∫ßn nhi·ªÅu b√†i, d√πng nhi·ªÅu query kh√°c nhau
            const queryCount = Math.min(queries.length, Math.ceil(limit / 3));
            
            // Shuffle queries ƒë·ªÉ c√≥ t√≠nh ng·∫´u nhi√™n
            const shuffledQueries = [...queries].sort(() => Math.random() - 0.5);
            
            for (let i = 0; i < queryCount && allSongs.length < limit; i++) {
                const query = shuffledQueries[i];
                console.log(`üéØ Query ${i + 1}: "${query}"`);
                
                try {
                    const results = await searchYoutube(query, Math.min(5, limit - allSongs.length + 2));
                    
                    // Ki·ªÉm tra k·∫øt qu·∫£ c√≥ ph·∫£i l√† array kh√¥ng
                    let songsArray = [];
                    if (Array.isArray(results)) {
                        songsArray = results;
                    } else if (results && results.title) {
                        songsArray = [results];
                    }
                    
                    console.log(`üìä Query "${query}" returned ${songsArray.length} songs`);
                    
                    // ƒê√°nh d·∫•u t·∫•t c·∫£ b√†i l√† autoTrending
                    songsArray.forEach(song => {
                        song.autoTrending = true;
                        song.region = region;
                    });
                    
                    allSongs.push(...songsArray);
                    
                } catch (queryError) {
                    console.error(`‚ùå L·ªói v·ªõi query "${query}":`, queryError.message);
                }
                
                // Delay nh·ªè gi·ªØa c√°c query ƒë·ªÉ tr√°nh rate limit
                if (i < queryCount - 1) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
            }
            
            console.log(`üéµ Total songs found: ${allSongs.length}`);
            
            if (allSongs.length > 0) {
                // Shuffle k·∫øt qu·∫£ ƒë·ªÉ tƒÉng t√≠nh ng·∫´u nhi√™n
                const shuffledSongs = allSongs.sort(() => Math.random() - 0.5);
                
                // Tr·∫£ v·ªÅ 1 b√†i n·∫øu limit = 1, array n·∫øu limit > 1
                if (limit === 1) {
                    const selectedSong = shuffledSongs[0];
                    console.log(`üéµ Selected song: ${selectedSong.title}`);
                    return selectedSong;
                } else {
                    const selectedSongs = shuffledSongs.slice(0, limit);
                    console.log(`üéµ Selected ${selectedSongs.length} songs`);
                    return selectedSongs;
                }
            } else {
                console.log('‚ùå No search results found');
            }
        } catch (error) {
            console.error('‚ùå L·ªói auto trending:', error);
        }
        return null;
    }
};