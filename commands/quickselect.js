const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { initGuildMusicData } = require('../utils/musicUtils');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('quickselect')
        .setDescription('Ch·ªçn nhanh b√†i h√°t t·ª´ 5 b√†i ƒë·∫ßu trong queue'),

    async execute(interaction) {
        const guildData = initGuildMusicData(interaction.guildId);

        if (!guildData.queue || guildData.queue.length === 0) {
            return interaction.reply({
                content: '‚ùå Queue hi·ªán t·∫°i ƒëang tr·ªëng!',
                ephemeral: true
            });
        }

        if (!interaction.member.voice.channel) {
            return interaction.reply({
                content: '‚ùå B·∫°n c·∫ßn v√†o voice channel ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!',
                ephemeral: true
            });
        }

        try {
            await interaction.deferReply();

            // L·∫•y t·ªëi ƒëa 5 b√†i ƒë·∫ßu
            const songsToShow = Math.min(5, guildData.queue.length);
            const buttons = [];

            // T·∫°o buttons cho m·ªói b√†i h√°t
            for (let i = 0; i < songsToShow; i++) {
                const song = guildData.queue[i];
                const isCurrentSong = i === 0;
                
                buttons.push(
                    new ButtonBuilder()
                        .setCustomId(`select_song_${i}`)
                        .setLabel(`${i + 1}. ${song.title.length > 50 ? song.title.substring(0, 47) + '...' : song.title}`)
                        .setStyle(isCurrentSong ? ButtonStyle.Success : ButtonStyle.Primary)
                        .setEmoji(isCurrentSong ? '‚ñ∂Ô∏è' : 'üéµ')
                );
            }

            // Chia buttons th√†nh rows (t·ªëi ƒëa 5 buttons/row)
            const rows = [];
            for (let i = 0; i < buttons.length; i += 5) {
                rows.push(new ActionRowBuilder().addComponents(buttons.slice(i, i + 5)));
            }

            // Th√™m row ƒëi·ªÅu khi·ªÉn
            const controlRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('show_full_queue')
                        .setLabel('üìã Xem to√†n b·ªô queue')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('shuffle_music')
                        .setLabel('üîÄ Tr·ªôn b√†i')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('clear_queue')
                        .setLabel('üóëÔ∏è X√≥a queue')
                        .setStyle(ButtonStyle.Danger)
                );

            rows.push(controlRow);

            // T·∫°o embed hi·ªÉn th·ªã
            const embed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle('üéµ Quick Select - Ch·ªçn nhanh b√†i h√°t')
                .setDescription(`Ch·ªçn m·ªôt trong ${songsToShow} b√†i ƒë·∫ßu ƒë·ªÉ ph√°t ngay:`)
                .addFields(
                    { name: 'T·ªïng s·ªë b√†i', value: `${guildData.queue.length} b√†i`, inline: true },
                    { name: 'ƒêang ph√°t', value: guildData.isPlaying ? '‚úÖ C√≥' : '‚ùå Kh√¥ng', inline: true },
                    { name: 'Voice Channel', value: interaction.member.voice.channel.name, inline: true }
                )
                .setFooter({ text: 'Nh·∫•n v√†o button b√†i h√°t ƒë·ªÉ ph√°t ngay l·∫≠p t·ª©c' });

            await interaction.editReply({ 
                embeds: [embed], 
                components: rows 
            });

        } catch (error) {
            console.error('L·ªói quickselect command:', error);
            await interaction.editReply({
                content: '‚ùå C√≥ l·ªói khi load quick select!'
            });
        }
    }
};
