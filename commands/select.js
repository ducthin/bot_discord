const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder } = require('discord.js');
const { initGuildMusicData } = require('../utils/musicUtils');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('select')
        .setDescription('Ch·ªçn b√†i h√°t t·ª´ queue ƒë·ªÉ ph√°t ngay l·∫≠p t·ª©c')
        .addIntegerOption(option =>
            option.setName('position')
                .setDescription('V·ªã tr√≠ b√†i h√°t trong queue (1, 2, 3...)')
                .setRequired(false)),

    async execute(interaction) {
        const guildData = initGuildMusicData(interaction.guildId);
        const position = interaction.options.getInteger('position');

        if (!guildData.queue || guildData.queue.length === 0) {
            return interaction.reply({
                content: '‚ùå Queue hi·ªán t·∫°i ƒëang tr·ªëng!',
                ephemeral: true
            });
        }

        if (!interaction.member.voice.channel) {
            return interaction.reply({
                content: '‚ùå B·∫°n c·∫ßn v√†o voice channel ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!',
                ephemeral: true
            });
        }

        try {
            await interaction.deferReply();

            // N·∫øu c√≥ position, ch·ªçn tr·ª±c ti·∫øp
            if (position) {
                if (position < 1 || position > guildData.queue.length) {
                    return interaction.editReply({
                        content: `‚ùå V·ªã tr√≠ kh√¥ng h·ª£p l·ªá! Queue c√≥ ${guildData.queue.length} b√†i h√°t.`
                    });
                }

                const selectedSong = guildData.queue[position - 1];
                
                // Di chuy·ªÉn b√†i ƒë∆∞·ª£c ch·ªçn l√™n ƒë·∫ßu queue
                guildData.queue.splice(position - 1, 1);
                guildData.queue.unshift(selectedSong);

                const embed = new EmbedBuilder()
                    .setColor('#00ff00')
                    .setTitle('üéµ ƒê√£ ch·ªçn b√†i ƒë·ªÉ ph√°t ti·∫øp theo')
                    .setDescription(`**${selectedSong.title}**`)
                    .addFields(
                        { name: 'V·ªã tr√≠ c≈©', value: `#${position}`, inline: true },
                        { name: 'V·ªã tr√≠ m·ªõi', value: '#1 (Ti·∫øp theo)', inline: true }
                    )
                    .setThumbnail(selectedSong.thumbnail);

                await interaction.editReply({ embeds: [embed] });

                // N·∫øu kh√¥ng ƒëang ph√°t, b·∫Øt ƒë·∫ßu ph√°t ngay
                if (!guildData.isPlaying) {
                    const { createMusicConnection, playMusic } = require('../utils/musicUtils');
                    createMusicConnection(interaction.member, guildData);
                    playMusic(guildData);
                }

                return;
            }

            // N·∫øu kh√¥ng c√≥ position, hi·ªÉn th·ªã select menu
            if (guildData.queue.length > 25) {
                return interaction.editReply({
                    content: '‚ùå Queue qu√° d√†i (>25 b√†i). Vui l√≤ng s·ª≠ d·ª•ng `/select position:<s·ªë>` ƒë·ªÉ ch·ªçn tr·ª±c ti·∫øp.'
                });
            }

            // T·∫°o select menu v·ªõi danh s√°ch b√†i h√°t
            const options = guildData.queue.map((song, index) => ({
                label: song.title.length > 100 ? song.title.substring(0, 97) + '...' : song.title,
                description: `V·ªã tr√≠ #${index + 1} - ${song.duration || 'N/A'}`,
                value: index.toString(),
                emoji: index === 0 ? '‚ñ∂Ô∏è' : 'üéµ'
            }));

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('select_song')
                .setPlaceholder('Ch·ªçn b√†i h√°t ƒë·ªÉ ph√°t ti·∫øp theo...')
                .addOptions(options);

            const row = new ActionRowBuilder().addComponents(selectMenu);

            const embed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle('üéµ Ch·ªçn b√†i h√°t t·ª´ Queue')
                .setDescription(`Queue hi·ªán t·∫°i c√≥ **${guildData.queue.length}** b√†i h√°t.\nCh·ªçn b√†i b·∫°n mu·ªën ph√°t ti·∫øp theo:`)
                .setFooter({ text: 'B√†i ƒë∆∞·ª£c ch·ªçn s·∫Ω ƒë∆∞·ª£c di chuy·ªÉn l√™n ƒë·∫ßu queue' });

            await interaction.editReply({ 
                embeds: [embed], 
                components: [row] 
            });

        } catch (error) {
            console.error('L·ªói select command:', error);
            await interaction.editReply({
                content: '‚ùå C√≥ l·ªói khi x·ª≠ l√Ω l·ªánh select!'
            });
        }
    }
};
