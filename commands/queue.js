const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { initGuildMusicData } = require('../utils/musicUtils');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('queue')
        .setDescription('Hi·ªÉn th·ªã danh s√°ch ph√°t'),

    async execute(interaction) {
        const guildData = initGuildMusicData(interaction.guild.id);
        
        if (guildData.queue.length === 0) {
            return interaction.reply('üì≠ danh s√°ch tr·ªëng!');
        }

        const queueList = guildData.queue.slice(0, 15).map((song, index) => {
            if (index === 0) {
                return `‚ñ∂Ô∏è **ƒêang ph√°t:** ${song.title} - ${song.duration}`;
            } else {
                return `\`${index.toString().padStart(2, ' ')}\` **${song.title}** - ${song.duration}`;
            }
        }).join('\n');

        const queueEmbed = new EmbedBuilder()
            .setColor('#0099ff')
            .setTitle('üéµ Danh s√°ch ph√°t')
            .setDescription(queueList)
            .addFields(
                { name: 'T·ªïng s·ªë b√†i', value: `${guildData.queue.length} b√†i`, inline: true },
                { name: 'ƒêang ph√°t', value: guildData.isPlaying ? '‚úÖ C√≥' : '‚ùå Kh√¥ng', inline: true }
            )
            .setFooter({ text: 'S·ª≠ d·ª•ng /select ho·∫∑c /skipto ƒë·ªÉ ch·ªçn b√†i' });

        // T·∫°o buttons ƒëi·ªÅu khi·ªÉn v·ªõi th√™m select button
        const controlButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('pause_music')
                    .setLabel('‚è∏Ô∏è T·∫°m d·ª´ng')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('resume_music')
                    .setLabel('‚ñ∂Ô∏è Ti·∫øp t·ª•c')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('skip_music')
                    .setLabel('‚è≠Ô∏è B·ªè qua')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('shuffle_music')
                    .setLabel('ÔøΩ Tr·ªôn b√†i')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('stop_music')
                    .setLabel('‚èπÔ∏è D·ª´ng')
                    .setStyle(ButtonStyle.Danger)
            );

        interaction.reply({ 
            embeds: [queueEmbed], 
            components: [controlButtons] 
        });
    }
};
